{"version":3,"sources":["scripts/main.js"],"names":["table","document","querySelector","buttonStart","messageStart","messageLose","messageWin","collLength","rowLenght","gameScore","count","start","randomNumbersTwoAndFour","randomNumber","Math","floor","random","searchEmptyCells","arr","i","j","rows","cells","textContent","push","addNewCell","emptyCells","length","lengthArr","element","rowsIndex","colIndex","number","classList","add","handleMove","direction","oldArr","fillEmptyCells","x","y","current","nextI","nextJ","cl","next","remove","checkingChanges","emptyCellIndex","currentCell","newArr","every","value","index","checkingForMoves","addEventListener","content","body","e","key"],"mappings":"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","file":"main.88e7354a.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst table = document.querySelector('table');\nconst buttonStart = document.querySelector('.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst collLength = 4;\nconst rowLenght = 4;\nconst gameScore = document.querySelector('.game-score');\nlet count = 0;\nlet start = false;\n\nfunction randomNumbersTwoAndFour() {\n  const randomNumber = Math.floor(Math.random() * 10);\n\n  if (randomNumber < 1) {\n    return 4;\n  }\n\n  return 2;\n}\n\nfunction searchEmptyCells() {\n  const arr = [];\n\n  for (let i = 0; i < rowLenght; i++) {\n    for (let j = 0; j < collLength; j++) {\n      if (table.rows[i].cells[j].textContent === '') {\n        arr.push([i, j]);\n      }\n    }\n  }\n\n  return arr;\n}\n\nfunction addNewCell() {\n  const emptyCells = searchEmptyCells();\n\n  if (emptyCells.length > 0) {\n    const lengthArr = emptyCells.length - 1;\n    const index = Math.floor(Math.random() * lengthArr);\n    const element = emptyCells[index];\n    const [rowsIndex, colIndex] = element;\n    const number = randomNumbersTwoAndFour();\n\n    table.rows[rowsIndex].cells[colIndex].textContent = number;\n\n    table.rows[rowsIndex].cells[colIndex]\n      .classList.add(`field-cell--${number}`);\n  }\n}\n\nbuttonStart.addEventListener('click', () => {\n  buttonStart.classList.add('restart');\n  buttonStart.classList.remove('start');\n  buttonStart.textContent = 'Restart';\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n\n  if (start) {\n    count = 0;\n    gameScore.textContent = count;\n\n    for (let i = 0; i < rowLenght; i++) {\n      for (let j = 0; j < collLength; j++) {\n        if (table.rows[i].cells[j].textContent) {\n          const content = table.rows[i].cells[j].textContent;\n\n          table.rows[i].cells[j].textContent = '';\n          table.rows[i].cells[j].classList.remove(`field-cell--${content}`);\n        }\n      }\n    }\n  }\n  start = true;\n  addNewCell();\n  addNewCell();\n});\n\ndocument.body.addEventListener('keydown', (e) => {\n  const oldArr = [];\n\n  for (let i = 0; i < rowLenght; i++) {\n    for (let j = 0; j < collLength; j++) {\n      oldArr.push(table.rows[i].cells[j].textContent);\n    }\n  }\n\n  switch (e.key) {\n    case 'ArrowRight':\n      handleMove('right', oldArr);\n      checkingForMoves();\n      break;\n    case 'ArrowLeft':\n      handleMove('left', oldArr);\n      checkingForMoves();\n      break;\n    case 'ArrowUp':\n      handleMove('up', oldArr);\n      checkingForMoves();\n      break;\n    case 'ArrowDown':\n      handleMove('down', oldArr);\n      checkingForMoves();\n      break;\n  }\n});\n\nfunction handleMove(direction, oldArr) {\n  fillEmptyCells(direction);\n\n  const x = (direction === 'right' || direction === 'down')\n    ? rowLenght - 1 : 0;\n  const y = (direction === 'right' || direction === 'left')\n    ? collLength - 1 : 0;\n\n  for (let i = 0; i < rowLenght; i++) {\n    for (let j = 0; j < collLength; j++) {\n      if ((i === x && j === y) || table.rows[i].cells[j].textContent === '') {\n        continue;\n      }\n\n      const current = table.rows[i].cells[j];\n      let nextI = i;\n      let nextJ = j;\n\n      while (true) {\n        nextI += direction === 'up' ? -1 : direction === 'down' ? 1 : 0;\n        nextJ += direction === 'left' ? -1 : direction === 'right' ? 1 : 0;\n\n        if (nextI < 0\n          || nextI >= rowLenght\n          || nextJ < 0 || nextJ\n          >= collLength\n        ) {\n          nextI -= direction === 'up' ? -1 : direction === 'down' ? 1 : 0;\n          nextJ -= direction === 'left' ? -1 : direction === 'right' ? 1 : 0;\n          break;\n        }\n\n        if (table.rows[nextI].cells[nextJ].textContent === '') {\n          continue;\n        }\n\n        if (table.rows[nextI].cells[nextJ].textContent\n          !== current.textContent) {\n          nextI -= direction === 'up' ? -1 : direction === 'down' ? 1 : 0;\n          nextJ -= direction === 'left' ? -1 : direction === 'right' ? 1 : 0;\n          break;\n        }\n\n        const cl = `field-cell--${current.textContent}`;\n        const next = table.rows[nextI].cells[nextJ];\n\n        next.classList.remove(cl);\n        current.classList.remove(cl);\n        current.classList.add(`field-cell--${next.textContent * 2}`);\n        current.textContent = next.textContent * 2;\n        next.textContent = '';\n        count += +current.textContent;\n\n        if (current.textContent === '2048') {\n          messageWin.classList.remove('hidden');\n        }\n        break;\n      }\n    }\n  }\n\n  fillEmptyCells(direction);\n  gameScore.textContent = count;\n\n  if (!checkingChanges(oldArr)) {\n    addNewCell();\n  };\n}\n\nfunction fillEmptyCells(direction) {\n  const rows = table.rows;\n\n  switch (direction) {\n    case 'right':\n      for (let i = 0; i < rowLenght; i++) {\n        let emptyCellIndex = -1;\n\n        for (let j = collLength - 1; j >= 0; j--) {\n          const currentCell = rows[i].cells[j];\n\n          if (currentCell.textContent === '') {\n            if (emptyCellIndex === -1) {\n              emptyCellIndex = j;\n            }\n          } else if (emptyCellIndex !== -1) {\n            const cl = `field-cell--${currentCell.textContent}`;\n\n            rows[i].cells[emptyCellIndex].textContent = currentCell.textContent;\n            rows[i].cells[emptyCellIndex].classList.add(cl);\n            currentCell.classList.remove(cl);\n            currentCell.textContent = '';\n            emptyCellIndex--;\n          }\n        }\n      }\n      break;\n\n    case 'left':\n      for (let i = 0; i < rowLenght; i++) {\n        let emptyCellIndex = -1;\n\n        for (let j = 0; j < collLength; j++) {\n          const currentCell = rows[i].cells[j];\n\n          if (currentCell.textContent === '') {\n            if (emptyCellIndex === -1) {\n              emptyCellIndex = j;\n            }\n          } else if (emptyCellIndex !== -1) {\n            const cl = `field-cell--${currentCell.textContent}`;\n\n            rows[i].cells[emptyCellIndex].textContent = currentCell.textContent;\n            rows[i].cells[emptyCellIndex].classList.add(cl);\n            currentCell.classList.remove(cl);\n            currentCell.textContent = '';\n            emptyCellIndex++;\n          }\n        }\n      }\n      break;\n    case 'down':\n      for (let j = 0; j < collLength; j++) {\n        let emptyCellIndex = -1;\n\n        for (let i = rowLenght - 1; i >= 0; i--) {\n          const currentCell = rows[i].cells[j];\n\n          if (currentCell.textContent === '') {\n            if (emptyCellIndex === -1) {\n              emptyCellIndex = i;\n            }\n          } else if (emptyCellIndex !== -1) {\n            const cl = `field-cell--${currentCell.textContent}`;\n\n            rows[emptyCellIndex].cells[j].textContent = currentCell.textContent;\n            rows[emptyCellIndex].cells[j].classList.add(cl);\n            currentCell.classList.remove(cl);\n            currentCell.textContent = '';\n            emptyCellIndex--;\n          }\n        }\n      }\n      break;\n    case 'up':\n      for (let j = 0; j < rowLenght; j++) {\n        let emptyCellIndex = -1;\n\n        for (let i = 0; i < collLength; i++) {\n          const currentCell = rows[i].cells[j];\n\n          if (currentCell.textContent === '') {\n            if (emptyCellIndex === -1) {\n              emptyCellIndex = i;\n            }\n          } else if (emptyCellIndex !== -1) {\n            const cl = `field-cell--${currentCell.textContent}`;\n\n            rows[emptyCellIndex].cells[j].textContent = currentCell.textContent;\n            rows[emptyCellIndex].cells[j].classList.add(cl);\n            currentCell.classList.remove(cl);\n            currentCell.textContent = '';\n            emptyCellIndex++;\n          }\n        }\n      }\n      break;\n  }\n};\n\nfunction checkingChanges(arr) {\n  const newArr = [];\n\n  for (let i = 0; i < rowLenght; i++) {\n    for (let j = 0; j < collLength; j++) {\n      newArr.push(table.rows[i].cells[j].textContent);\n    }\n  }\n\n  return newArr.every((value, index) => value === arr[index]);\n}\n\nfunction checkingForMoves() {\n  for (let i = 0; i < rowLenght; i++) {\n    for (let j = 0; j < collLength; j++) {\n      if (table.rows[i].cells[j].textContent === '') {\n        return;\n      }\n    }\n  }\n\n  for (let i = 0; i < rowLenght; i++) {\n    for (let j = 0; j < collLength - 1; j++) {\n      if (table.rows[i].cells[j].textContent\n        === table.rows[i].cells[j + 1].textContent) {\n        return;\n      }\n    }\n  }\n\n  for (let j = 0; j < collLength; j++) {\n    for (let i = 0; i < rowLenght - 1; i++) {\n      if (table.rows[i].cells[j].textContent\n        === table.rows[i + 1].cells[j].textContent) {\n        return;\n      }\n    }\n  }\n\n  messageLose.classList.remove('hidden');\n}\n"]}